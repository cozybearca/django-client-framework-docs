Getting Starting with Django Backend
====================================

.. seealso::

    This section assumes that you are familiar with Django. For a beginner's
    guide for Django, see this link [todo].


Installation with pip3+git
--------------------------

Django Client Framework (Django) requires `python3.6+` and `Django 3.0+`. To
install Django Client Framework from the GitHub repository, run this in your
shell:

.. code-block:: bash

    pip3 install -e git+https://github.com/cozybearca/django-client-framework.git#egg=django_client_framework


Configure Django's settings.py file
-----------------------------------

In `settings.py` for your Django app, simply add at the end of the file:

.. seealso::

    If you are not familiar with `settings.py`, you haven't completed the basic
    tutorial for Django. See [todo].

.. code-block:: py

    import django_client_framework.settings
    django_client_framework.settings.install(
        INSTALLED_APPS,
        REST_FRAMEWORK,
        MIDDLEWARE,
        AUTHENTICATION_BACKENDS
    )


.. warning::

    The line must be added after where the `INSTALLED_APPS`, `REST_FRAMEWORK`,
    `MIDDLEWARE` and `AUTHENTICATION_BACKENDS` global variables are defined,
    because the `.install()` function modifies these variables by reference.

An example of the `settings.py` file is as follows:

.. code-block:: py

    import django_client_framework.settings

    # ... other configs

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    REST_FRAMEWORK = {
        # .. your settings
    }

    AUTHENTICATION_BACKENDS = [
        # .. your settings
    ]

    # Add this line
    django_client_framework.settings.install(
        INSTALLED_APPS,
        REST_FRAMEWORK,
        MIDDLEWARE,
        AUTHENTICATION_BACKENDS
    )


Add Routing Handlers to urls.py
-------------------------------

Next, add Django Client Framework's API route handlers to app's `urls.py` file:

.. seealso::

    If you are not familiar with `urls.py`, you haven't completed the basic
    tutorial for Django. See [todo].


.. code-block:: py

    import django_client_framework.api.urls

    app_name = "api_v1"

    urlpatterns = django_client_framework.api.urls.urlpatterns + [
        ... # other routes
        ]


.. note::

    The `.urlpatterns` variable provided by the Django Client Framework is just
    a list of routes and handlers. You can append this variable to your
    urlpatterns list flexiably. Internally, the `.urlpatterns` is defined as
    follows:

    .. code-block:: py

        # django_client_framework.api.urls.urlpatterns
        urlpatterns = [
            path("<str:model>", ModelCollectionAPI.as_view(), name="model_collection"),
            path("<str:model>/<int:pk>", ModelObjectAPI.as_view(), name="model_object"),
            path(
                "<str:model>/<int:pk>/<str:target_field>",
                ModelFieldAPI.as_view(),
                name="model_field",
            ),
        ]


Add a Serializable Model
-------------------------

To add a model, create a model that extends from
`django_client_framework.models.Serializable`. For instance:

.. seealso::

    If you are not familiar with `Model`, you haven't completed the basic
    tutorial for Django. See [todo].

.. code-block:: py

    from django_client_framework.models import Serializable
    from django.db.models import CharField

    class Product(Serializable):
        barcode = CharField(max_length=32)

The `Serializable` requires `Product` to implement a class method named
`serializer_class`, which should return a `ModelSerializer`. This class is
responsible for converting back and forth betwen a JSON object and a class
object, ie, serialization and deserialization.

.. warning::

    Django Client Framework's `ModelSerializer` is a subclass of Django Rest
    Framework's `ModelSerializer` class, with some additional handlers added.
    Therefore, they mostly have the same syntax and usage.

.. seealso::

    If you are unfarmiliar with `ModelSerializer` in Django Rest Framework,
    complete this tutorial for Django Rest Framework first. [todo]

To define a `ModelSerializer` for `Product`, we create another class that
inherits from `ModelSerializer`:


.. code-block:: py

    from django_client_framework.serializers import ModelSerializer

    class ProductSerializer(ModelSerializer):
        class Meta:
            model = Product
            exclude = []

Finally, we return this class from the `serializer_class` method. The final code
looks like this:


.. code-block:: py

    from django_client_framework.models import Serializable
    from django_client_framework.serializers import ModelSerializer
    from django.db.models import CharField

    class Product(Serializable):
        barcode = CharField(max_length=32)

        @classmethod
        def serializer_class(cls):
            return ProductSerializer

    class ProductSerializer(ModelSerializer):
        class Meta:
            model = Product
            exclude = []


Now you can run migration to apply the new model.

.. code-block:: bash

    django-admin makemigrations
    django-admin migrate


.. seealso::

    If you are not familiar with Django's migration system, you haven't
    completed the basic tutorial for Django. See [todo].


Make an AccessControlled Model
------------------------------

Django Client Framework supports both model and object level authorizations. By
default, all objects are only readable and writable only to superusers. Next, we
will give the read permission to the anyone user group, so that the product list
is publically visible to anyone visiting our site.

To manage model permission, `Product` needs to extend the `AccessControlled`
class, and overrides a class method named `.get_permissionmanager_class()`. The
`.get_permissionmanager_class()` class method should return a
`PermissionManager` class that implements a method named `.add_perms(instance)`.
The default implementation of `.get_permissionmanager_class()` looks for a class
named `PermissionManager` in the model class.

To give anyone the read permission to the Product model, we import the
`default_groups.anyone` and `set_perms_shortcut` from
`django_client_framework.permissions` and use them to set the permissions.

.. code-block:: py

    from django_client_framework.models import Serializable, AccessControlled
    from django_client_framework.serializers import ModelSerializer
    from django_client_framework.permissions import default_groups, set_perms_shortcut
    from django.db.models import CharField


    class Product(Serializable, AccessControlled):
        barcode = CharField(max_length=32)

        @classmethod
        def serializer_class(cls):
            return ProductSerializer

        class PermissionManager(AccessControlled.PermissionManager):
            def add_perms(self, product):
                set_perms_shortcut(default_groups.anyone, product, "r")


    class ProductSerializer(ModelSerializer):
        class Meta:
            model = Product
            exclude = []


Now to refresh the permission stored in the database, run this in Django shell:

.. code-block:: bash

    django-admin shell

.. code-block:: py

    # inside shell

    from django_client_framework.permissions import setup_permissions

    setup_permissions()

.. warning::

    Consider running `setup_permissions()` during the django migrations whenever
    the permission is changed on a model.


Send a RESTful Request
----------------------

Now that the `Product` model is correctly configured, you can create a `Product`
object in Django and visit in via the REST API.

.. code-block:: bash

    django-admin shell


.. code-block:: py

    # inside shell
    from .product import Product

    Product.objects.create(barcode="xxyy")

Start the django development server:

.. code-block:: bash

    django-admin runserver # Starting development server at http://127.0.0.1:8000/


To visit the list of products, send a GET request to this url:

.. code-block:: bash

    curl http://localhost:8000/product/
    # Response:
    # {
    #     total: 1,
    #     limit: 50,
    #     page: 1,
    #     objects: [
    #         {
    #             id: 1,
    #             barcode: "xxyy"
    #         }
    #     ],
    #     next:null,
    #     previous:null
    # }


.. seealso::

    Besides retrieving the object, creation, deleting, and modifications are
    also supported through POST, DELETE, PUT RESTful requests respectively. See
    this link for more details. [todo]

